#!/bin/bash
# =============================================================================
# 规则生成脚本 v2.0
# 支持域名规则和IP规则的生成、格式转换和去重
# 作者：ykvhjnn
# 最后更新：2025-07-04
# =============================================================================

set -euo pipefail

# -----------------------------------------------------------------------------
# 【步骤1】辅助函数定义
# -----------------------------------------------------------------------------
function error_exit() {
    echo "[$(date '+%H:%M:%S')] [ERROR] $1" >&2
    exit 1
}

function add_yaml_header() {
    local file="$1"
    local name="$2"
    local type="$3"
    local behavior="${4:-}"
    
    # 创建临时文件
    local tmp_file="${file}.tmp"
    
    # 添加YAML头部
    {
        echo "payload:"
        echo "# NAME: $name"
        echo "# AUTHOR: ykvhjnn"
        echo "# REPO: https://github.com/ykvhjnn/Rules"
        echo "# UPDATED: $(date -u +%Y-%m-%d\ %H:%M:%S)"
        echo "# TYPE: $type"
        [[ -n "$behavior" ]] && echo "# BEHAVIOR: $behavior"
        echo "# TOTAL: $(grep -c "^[^#]" "$file" || echo 0)"
        echo "# ==============================================================================" 
        # 添加原文件内容，确保proper yaml格式
        sed 's/^/  - /' "$file"
    } > "$tmp_file"
    
    mv "$tmp_file" "$file"
}

function add_adblock_header() {
    local file="$1"
    local name="$2"
    
    local tmp_file="${file}.tmp"
    
    {
        echo "[Adblock Plus 2.0]"
        echo "! Title: $name"
        echo "! Description: Generated by ykvhjnn/Rules"
        echo "! Homepage: https://github.com/ykvhjnn/Rules"
        echo "! Last modified: $(date -u +%Y-%m-%d\ %H:%M:%S)"
        echo "! Version: $(date -u +%Y%m%d%H%M%S)"
        echo "! Total Count: $(grep -c "^||" "$file" || echo 0)"
        echo "! ==============================================================================" 
        cat "$file"
    } > "$tmp_file"
    
    mv "$tmp_file" "$file"
}

# IP去重函数
function dedup_ip() {
    local input_file="$1"
    local output_file="${input_file}.tmp"
    
    # 使用 sort -u 进行去重，同时保持CIDR格式的正确性
    sort -u -t. -k1,1n -k2,2n -k3,3n -k4,4n "$input_file" > "$output_file"
    mv "$output_file" "$input_file"
}

# 验证IP格式函数
function validate_ip() {
    local input_file="$1"
    local tmp_file="${input_file}.valid"
    
    while IFS= read -r line; do
        if [[ "$line" =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}(/[0-9]{1,2})?$ ]]; then
            # 验证IP地址各段的值是否在0-255之间
            IFS='.' read -r -a octets <<< "${line%/*}"
            valid=true
            for octet in "${octets[@]}"; do
                if ((octet < 0 || octet > 255)); then
                    valid=false
                    break
                fi
            done
            
            # 验证CIDR前缀（如果存在）
            if [[ "$line" == */* ]]; then
                prefix="${line#*/}"
                if ((prefix < 0 || prefix > 32)); then
                    valid=false
                fi
            fi
            
            # 如果验证通过，写入临时文件
            if [[ "$valid" == true ]]; then
                echo "$line" >> "$tmp_file"
            fi
        fi
    done < "$input_file"
    
    mv "$tmp_file" "$input_file"
}

# -----------------------------------------------------------------------------
# 【步骤2】参数检查
# -----------------------------------------------------------------------------
if [[ $# -ne 1 ]]; then
    echo "[$(date '+%H:%M:%S')] 用法: $0 [组名]"
    echo "示例: $0 Proxy"
    exit 1
fi

# -----------------------------------------------------------------------------
# 【步骤3】进入脚本目录
# -----------------------------------------------------------------------------
cd "$(cd "$(dirname "$0")"; pwd)" || error_exit "无法进入脚本目录"

# -----------------------------------------------------------------------------
# 【步骤4】规则源定义
# -----------------------------------------------------------------------------
declare -A urls_map
declare -A ip_urls_map

urls_map["Proxy"]="
https://ruleset.skk.moe/Clash/domainset/speedtest.txt
https://ruleset.skk.moe/Clash/non_ip/my_proxy.txt
https://ruleset.skk.moe/Clash/non_ip/ai.txt
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/GitHub/GitHub.list
https://github.com/DustinWin/ruleset_geodata/releases/download/mihomo-ruleset/proxy.list
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/Global/Global_Domain_For_Clash.txt
https://raw.githubusercontent.com/ykvhjnn/Rules/refs/heads/main/Add/Proxy.txt
"

ip_urls_map["Proxy"]="
https://raw.githubusercontent.com/pmkol/easymosdns/refs/heads/main/rules/gfw_ip_list.txt
"

# ... 其他规则组定义 ...

# -----------------------------------------------------------------------------
# 【步骤5】Python脚本定义
# -----------------------------------------------------------------------------
declare -A py_scripts
py_scripts["Proxy"]="collect.py remove_domains_Proxy.py clean.py add_domains_Proxy.py"
# ... 其他组的Python脚本定义 ...

# -----------------------------------------------------------------------------
# 【步骤6】参数校验
# -----------------------------------------------------------------------------
group="$1"
if [[ -z "${urls_map[$group]:-}" ]]; then
    echo "[$(date '+%H:%M:%S')] [ERROR] 未找到组: $group"
    echo "可用组有:"
    for k in "${!urls_map[@]}"; do
        echo "  - $k"
    done
    exit 1
fi

# -----------------------------------------------------------------------------
# 【步骤7】文件名定义
# -----------------------------------------------------------------------------
domain_file="${group}_domain.txt"
ip_file="${group}_ip.txt"
tmp_file="${group}_tmp.txt"
ip_tmp_file="${group}_ip_tmp.txt"
mihomo_domain_file="${group}_domain.yaml"
mihomo_ip_file="${group}_ip.yaml"
mihomo_domain_mrs="${group}_domain.mrs"
mihomo_ip_mrs="${group}_ip.mrs"
clash_classical_file="${group}_classical.yaml"
adblock_file="${group}_adblock.txt"
singbox_file="${group}_singbox.json"
singbox_srs_file="${group}_singbox.srs"

# -----------------------------------------------------------------------------
# 【步骤8】下载工具
# -----------------------------------------------------------------------------
MIHOMO_TOOL=".mihomo_tool"
SINGBOX_TOOL=".singbox_tool"

function download_mihomo() {
    if [[ -f "$MIHOMO_TOOL" && -x "$MIHOMO_TOOL" ]]; then
        echo "[$(date '+%H:%M:%S')] Mihomo 工具已存在，跳过下载"
        return
    fi
    echo "[$(date '+%H:%M:%S')] 开始下载 Mihomo 工具..."
    wget -q https://github.com/MetaCubeX/mihomo/releases/download/Prerelease-Alpha/version.txt \
        || error_exit "下载 Mihomo 版本文件失败"
    version=$(cat version.txt)
    tool_name="mihomo-linux-amd64-$version"
    wget -q "https://github.com/MetaCubeX/mihomo/releases/download/Prerelease-Alpha/$tool_name.gz" \
        || error_exit "下载 Mihomo 工具失败"
    gzip -d "$tool_name.gz" || error_exit "解压 Mihomo 工具失败"
    chmod +x "$tool_name" || error_exit "赋予 Mihomo 工具可执行权限失败"
    mv "$tool_name" "$MIHOMO_TOOL"
    rm -f version.txt
}

function download_singbox() {
    # ... sing-box下载逻辑保持不变 ...
}

download_mihomo
download_singbox

# -----------------------------------------------------------------------------
# 【步骤9】清理旧文件
# -----------------------------------------------------------------------------
> "$domain_file"
> "$ip_file"
> "$tmp_file"
> "$ip_tmp_file"

# -----------------------------------------------------------------------------
# 【步骤10】下载规则
# -----------------------------------------------------------------------------
echo "[$(date '+%H:%M:%S')] 开始下载规则..."

# 下载域名规则
urls_list=()
while read -r url; do
    [[ -n "$url" ]] && urls_list+=("$url")
done <<< "${urls_map[$group]}"

for url in "${urls_list[@]}"; do
    {
        out="${tmp_file}_$RANDOM"
        if curl --http2 --compressed --max-time 30 --retry 2 -sSL "$url" >> "$out"; then
            echo "[$(date '+%H:%M:%S')] [成功] 下载域名规则: $url"
        else
            echo "[$(date '+%H:%M:%S')] [警告] 下载失败: $url" >&2
        fi
    } &
    if [[ $(jobs -rp | wc -l) -ge 8 ]]; then
        wait -n
    fi
done
wait

# 下载IP规则
if [[ -n "${ip_urls_map[$group]:-}" ]]; then
    ip_urls_list=()
    while read -r url; do
        [[ -n "$url" ]] && ip_urls_list+=("$url")
    done <<< "${ip_urls_map[$group]}"

    for url in "${ip_urls_list[@]}"; do
        {
            out="${ip_tmp_file}_$RANDOM"
            if curl --http2 --compressed --max-time 30 --retry 2 -sSL "$url" >> "$out"; then
                echo "[$(date '+%H:%M:%S')] [成功] 下载IP规则: $url"
            else
                echo "[$(date '+%H:%M:%S')] [警告] 下载失败: $url" >&2
            fi
        } &
        if [[ $(jobs -rp | wc -l) -ge 8 ]]; then
            wait -n
        fi
    done
    wait
fi

# 合并下载的文件
cat "${tmp_file}"_* >> "$domain_file" 2>/dev/null || true
cat "${ip_tmp_file}"_* >> "$ip_file" 2>/dev/null || true
rm -f "${tmp_file}"_* "${ip_tmp_file}"_*

# -----------------------------------------------------------------------------
# 【步骤11】规则处理
# -----------------------------------------------------------------------------
# 清理换行符
sed -i 's/\r//' "$domain_file" "$ip_file"

# 执行Python清洗脚本
for py in ${py_scripts[$group]}; do
    if [[ ! -f "$py" ]]; then
        error_exit "找不到Python脚本: $py"
    fi
    echo "[$(date '+%H:%M:%S')] 执行脚本: $py"
    if ! python "$py" "$domain_file"; then
        error_exit "Python脚本 $py 执行失败"
    fi
done

# IP规则去重和验证
if [[ -s "$ip_file" ]]; then
    echo "[$(date '+%H:%M:%S')] 正在处理IP规则..."
    validate_ip "$ip_file"
    dedup_ip "$ip_file"
fi

# -----------------------------------------------------------------------------
# 【步骤12】生成各种格式的规则文件
# -----------------------------------------------------------------------------
# 1. 生成域名规则的YAML格式
sed "s/^/  - DOMAIN-SUFFIX,/g" "$domain_file" > "$mihomo_domain_file"
add_yaml_header "$mihomo_domain_file" "${group} Domain Rules" "domain" "proxy"

# 2. 生成IP规则的YAML格式
if [[ -s "$ip_file" ]]; then
    sed "s/^/  - IP-CIDR,/g" "$ip_file" > "$mihomo_ip_file"
    add_yaml_header "$mihomo_ip_file" "${group} IP Rules" "ipcidr" "proxy"
fi

# 3. 生成Classical Clash格式
{
    echo "payload:"
    echo "# NAME: ${group} Rules"
    echo "# AUTHOR: ykvhjnn"
    echo "# REPO: https://github.com/ykvhjnn/Rules"
    echo "# UPDATED: $(date -u +%Y-%m-%d\ %H:%M:%S)"
    echo "# DESCRIPTION: ${group} rules for Clash"
    echo "# BEHAVIOR: proxy"
    echo "# ==============================================================================" 
    awk '!/^(\s*$|#)/{gsub(/^[ \t]*/,"");gsub(/[ \t]*$/,""); print "  - DOMAIN-SUFFIX,"$0}' "$domain_file"
    if [[ -s "$ip_file" ]]; then
        awk '!/^(\s*$|#)/{gsub(/^[ \t]*/,"");gsub(/[ \t]*$/,""); print "  - IP-CIDR,"$0}' "$ip_file"
    fi
} > "$clash_classical_file"

# 4. 生成Adblock格式
awk '!/^(\s*$|#)/{gsub(/^[ \t]*/,"");gsub(/[ \t]*$/,""); print "||"$0"^"}' "$domain_file" > "$adblock_file"
add_adblock_header "$adblock_file" "${group} Rules"

# 5. 生成sing-box格式
{
    echo "{"
    echo "  \"version\": 3,"
    echo "  \"rules\": ["
    echo "    {"
    echo "      \"domain_suffix\": ["
    awk -v first=1 '
    !/^(\s*$|#)/ {
        gsub(/^[ \t]*/,"")
        gsub(/[ \t]*$/,"")
        if (!first) printf ",\n"
        printf "        \"%s\"", $0
        first=0
    }' "$domain_file"
    echo
    echo "      ]"
    echo "    }"
    
    if [[ -s "$ip_file" ]]; then
        echo "    ,{"
        echo "      \"ip_cidr\": ["
        awk -v first=1 '
        !/^(\s*$|#)/ {
            gsub(/^[ \t]*/,"")
            gsub(/[ \t]*$/,"")
            if (!first) printf ",\n"
            printf "        \"%s\"", $0
            first=0
        }' "$ip_file"
        echo
        echo "      ]"
        echo "    }"
    fi
    
    echo "  ]"
    echo "}"
} > "$singbox_file"

# -----------------------------------------------------------------------------
# 【步骤13】使用工具转换格式
# -----------------------------------------------------------------------------
# 转换域名规则为mrs格式
if ! "./$MIHOMO_TOOL" convert-ruleset domain text "$mihomo_domain_file" "$mihomo_domain_mrs"; then
    error_exit "Mihomo工具转换域名规则失败"
fi

# 转换IP规则为mrs格式
if [[ -s "$ip_file" ]]; then
    if ! "./$MIHOMO_TOOL" convert-ruleset ipcidr text "$mihomo_ip_file" "$mihomo_ip_mrs"; then
        error_exit "Mihomo工具转换IP规则失败"
    fi
fi

# 转换sing-box规则为srs格式
if ! "./$SINGBOX_TOOL" rule-set compile "$singbox_file" -o "$singbox_srs_file"; then
    error_exit "sing-box工具转换失败"
fi

# -----------------------------------------------------------------------------
# 【步骤14】移动文件到指定目录
# -----------------------------------------------------------------------------
repo_root="$(cd ../.. && pwd)"
declare -A dirs=(
    ["clash_domain"]="YAML格式的域名规则"
    ["clash_ip"]="YAML格式的IP规则"
    ["mrs"]="Mihomo规则集"
    ["domain"]="纯文本域名列表"
    ["ip"]="纯文本IP列表"
    ["clash_classical"]="传统Clash格式规则"
    ["adblock"]="Adblock格式规则"
    ["singbox"]="sing-box JSON格式规则"
    ["srs"]="sing-box规则集"
    [".cache"]="缓存文件"
)

# 创建目录并添加说明文件
for dir in "${!dirs[@]}"; do
    mkdir -p "$repo_root/$dir"
    echo "# ${dirs[$dir]}" > "$repo_root/$dir/README.md"
    echo "此目录包含${dirs[$dir]}。" >> "$repo_root/$dir/README.md"
    echo "Last updated: $(date -u +%Y-%m-%d\ %H:%M:%S)" >> "$repo_root/$dir/README.md"
done

# 移动文件到对应目录
mv "$mihomo_domain_file" "$repo_root/clash_domain/"
[[ -f "$mihomo_ip_file" ]] && mv "$mihomo_ip_file" "$repo_root/clash_ip/"
mv "$mihomo_domain_mrs" "$repo_root/mrs/"
[[ -f "$mihomo_ip_mrs" ]] && mv "$mihomo_ip_mrs" "$repo_root/mrs/"
mv "$domain_file" "$repo_root/domain/"
[[ -f "$ip_file" ]] && mv "$ip_file" "$repo_root/ip/"
mv "$clash_classical_file" "$repo_root/clash_classical/"
mv "$adblock_file" "$repo_root/adblock/"
mv "$singbox_file" "$repo_root/singbox/"
mv "$singbox_srs_file" "$repo_root/srs/"

# 清理临时文件
rm -f "${group}_tmp.txt" "${group}_ip_tmp.txt"

# -----------------------------------------------------------------------------
# 【步骤15】完成提示
# -----------------------------------------------------------------------------
domain_count=$(grep -vE '^\s*$|^#' "$repo_root/domain/$domain_file" | wc -l)
ip_count=0
[[ -f "$repo_root/ip/$ip_file" ]] && ip_count=$(grep -vE '^\s*$|^#' "$repo_root/ip/$ip_file" | wc -l)

echo "[$(date '+%H:%M:%S')] 生成完成"
echo "域名规则数量: $domain_count"
echo "IP规则数量: $ip_count"
echo "输出目录: $repo_root"
